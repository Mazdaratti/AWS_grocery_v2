name: Terraform & Docker Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions: # Required for OIDC authentication
      id-token: write  # Required for OIDC authentication
      contents: read   # Required to checkout the repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          #aws-access-key-id: ${{ secrets.aws_access_key_id }}
          #aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          #aws-session-token: ${{ secrets.aws_session_token }}
          role-to-assume: ${{ secrets.ARN_GITHUB_ACTIONS_ROLE }} # Required for OIDC
          role-session-name: GitHubActionsSession
          aws-region: ${{ secrets.TF_VAR_REGION }}


      - name: Generate backend.tf dynamically
        run: |
          cat <<EOF > infrastructure/backend.tf
          terraform {
            backend "s3" {
              bucket         = "${{ secrets.TF_STATE_BACKEND_BUCKET_NAME }}"
              key            = "terraform_state/statefile.tfstate"
              region         = "${{ secrets.TF_VAR_REGION }}"
              encrypt        = true
              dynamodb_table = "${{ secrets.TF_STATE_LOCK_TABLE }}"
            }
          }
          EOF

          echo "Generated infrastructure/backend.tf"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: List files for debugging
        run: ls -R infrastructure

      - name: Initialize Terraform with Dynamic Backend
        run: terraform init
        working-directory: infrastructure

      - name: Validate Terraform Configuration
        run: terraform validate
        working-directory: infrastructure

      - name: Set Terraform Variables
        run: |
          echo "TF_VAR_allowed_ssh_ip=${{ secrets.TF_VAR_ALLOWED_SSH_IP }}" >> $GITHUB_ENV
          echo "TF_VAR_key_name=${{ secrets.TF_VAR_SSH_KEY_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_db_user=${{ secrets.TF_VAR_DB_USER }}" >> $GITHUB_ENV
          echo "TF_VAR_db_password=${{ secrets.TF_VAR_DB_PASSWORD }}" >> $GITHUB_ENV
          echo "TF_VAR_db_name=${{ secrets.TF_VAR_DB_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_region=${{ secrets.TF_VAR_REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_bucket_name=${{ secrets.TF_VAR_BUCKET_NAME }}" >> $GITHUB_ENV
          

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: infrastructure

      - name: Apply Terraform
        run: terraform apply -auto-approve tfplan
        working-directory: infrastructure

      - name: Set Terraform Outputs to Environment Variables
        run: |
          POSTGRES_HOST=$(terraform output -raw rds_host | tr -d '\r\n')
          ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url | tr -d '\r\n')

          echo "Debug: POSTGRES_HOST='$POSTGRES_HOST'"
          echo "Debug: ECR_REPOSITORY_URL='$ECR_REPOSITORY_URL'"

          if [[ -z "$POSTGRES_HOST" || -z "$ECR_REPOSITORY_URL" ]]; then
            echo "Error: One or more Terraform outputs are missing!" >&2
            exit 1
          fi

          ECR_REGISTRY_URL=$(echo "$ECR_REPOSITORY_URL" | cut -d'/' -f1)
          echo "Debug: ECR_REGISTRY_URL='$ECR_REGISTRY_URL'"

          echo "POSTGRES_HOST=$POSTGRES_HOST" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_URL=$ECR_REPOSITORY_URL" >> $GITHUB_ENV
          echo "ECR_REGISTRY_URL=$ECR_REGISTRY_URL" >> $GITHUB_ENV
      

      - name: Verify Terraform Outputs
        run: |
          echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}"
          echo "ECR_REPOSITORY_URL=${{ env.ECR_REPOSITORY_URL }}"
          echo "ECR_REGISTRY_URL=${{ env.ECR_REGISTRY_URL }}"

      - name: Generate .env File
        run: |
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> backend/.env
          echo "POSTGRES_USER=${{ secrets.TF_VAR_DB_USER }}" >> backend/.env
          echo "POSTGRES_PASSWORD=${{ secrets.TF_VAR_DB_PASSWORD }}" >> backend/.env
          echo "POSTGRES_DB=${{ secrets.TF_VAR_DB_NAME }}" >> backend/.env
          echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}" >> backend/.env
          echo "POSTGRES_URI=postgresql://${{ secrets.TF_VAR_DB_USER }}:${{ secrets.TF_VAR_DB_PASSWORD }}@${{ env.POSTGRES_HOST }}:5432/${{ secrets.TF_VAR_DB_NAME }}" >> backend/.env
          echo "S3_BUCKET_NAME=${{ secrets.TF_VAR_BUCKET_NAME }}" >> backend/.env
          echo "S3_REGION=${{ secrets.TF_VAR_REGION }}" >> backend/.env
          echo "USE_S3_STORAGE=true" >> backend/.env
          
          echo "Generated backend/.env:"
          cat backend/.env  # Debugging step (remove in production)

      - name: Build Docker Image
        run: |
          cd backend
          docker build -t my-ecr-repo:latest . || exit 1

      - name: Tag and Push Docker Image to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.TF_VAR_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY_URL }}
          docker tag my-ecr-repo:latest ${{ env.ECR_REPOSITORY_URL }}:latest
          docker push ${{ env.ECR_REPOSITORY_URL }}:latest

      - name: Delete .env to Prevent Exposure
        run: rm -f .env  # Ensures itâ€™s gone from GitHub runner

      - name: Clean Up Docker Images
        run: |
          docker rmi my-ecr-repo:latest ${{ env.ECR_REPOSITORY_URL }}:latest || true
